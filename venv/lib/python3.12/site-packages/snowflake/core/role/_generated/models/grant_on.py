# coding: utf-8
"""
    Snowflake Role API.

    The Snowflake Role API is a REST API that you can use to access, update, and perform certain actions on Role resource in a Snowflake database.  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Union

from datetime import datetime

from pydantic import BaseModel, ConfigDict, StrictStr

from typing import Any, ClassVar, Dict, List, Optional


class GrantOn(BaseModel):
    """A model object representing the GrantOn resource.

    Constructs an object of type GrantOn with the provided properties.

    Parameters
    __________
    created_on : datetime, optional
        Date and time when the grant was created
    privilege : str, optional
        The name of the privilege
    granted_on : str, optional
        The type of of the role
    name : str, optional
        The name of the role
    granted_to : str, optional
        The type of the grantee
    grantee_name : str, optional
        The name of the grantee
    grant_option : str, optional
        If true, allows the recipient role to grant the privileges to other roles.
    granted_by : str, optional
        The role that granted this privilege to this grantee
    granted_by_role_type : str, optional
        Type of the role that granted this privilege to this grantee
    """

    created_on: Optional[datetime] = None

    privilege: Optional[StrictStr] = None

    granted_on: Optional[StrictStr] = None

    name: Optional[StrictStr] = None

    granted_to: Optional[StrictStr] = None

    grantee_name: Optional[StrictStr] = None

    grant_option: Optional[StrictStr] = None

    granted_by: Optional[StrictStr] = None

    granted_by_role_type: Optional[StrictStr] = None

    __properties = [
        "created_on", "privilege", "granted_on", "name", "granted_to",
        "grantee_name", "grant_option", "granted_by", "granted_by_role_type"
    ]

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GrantOn:
        """Create an instance of GrantOn from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(
        self,
        hide_readonly_properties: bool = False,
    ) -> dict[str, Any]:
        """Returns the dictionary representation of the model using alias."""

        exclude_properties = set()

        if hide_readonly_properties:
            exclude_properties.update({
                "created_on",
                "privilege",
                "granted_on",
                "name",
                "granted_to",
                "grantee_name",
                "grant_option",
                "granted_by",
                "granted_by_role_type",
            })

        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude=exclude_properties,
                       exclude_none=True))

        return _dict

    def to_dict_without_readonly_properties(self) -> dict[str, Any]:
        """Return the dictionary representation of the model without readonly properties."""
        return self.to_dict(hide_readonly_properties=True)

    @classmethod
    def from_dict(cls, obj: dict) -> GrantOn:
        """Create an instance of GrantOn from a dict."""

        if obj is None:
            return None

        if type(obj) is not dict:
            return GrantOn.parse_obj(obj)

        _obj = GrantOn.parse_obj({
            "created_on":
            obj.get("created_on"),
            "privilege":
            obj.get("privilege"),
            "granted_on":
            obj.get("granted_on"),
            "name":
            obj.get("name"),
            "granted_to":
            obj.get("granted_to"),
            "grantee_name":
            obj.get("grantee_name"),
            "grant_option":
            obj.get("grant_option"),
            "granted_by":
            obj.get("granted_by"),
            "granted_by_role_type":
            obj.get("granted_by_role_type"),
        })

        return _obj


from typing import Optional, List, Dict


class GrantOnModel():

    def __init__(
        self,  # optional properties
        created_on: Optional[datetime] = None,
        privilege: Optional[str] = None,
        granted_on: Optional[str] = None,
        name: Optional[str] = None,
        granted_to: Optional[str] = None,
        grantee_name: Optional[str] = None,
        grant_option: Optional[str] = None,
        granted_by: Optional[str] = None,
        granted_by_role_type: Optional[str] = None,
    ):
        """A model object representing the GrantOn resource.

        Constructs an object of type GrantOn with the provided properties.

        Parameters
        __________
        created_on : datetime, optional
            Date and time when the grant was created
        privilege : str, optional
            The name of the privilege
        granted_on : str, optional
            The type of of the role
        name : str, optional
            The name of the role
        granted_to : str, optional
            The type of the grantee
        grantee_name : str, optional
            The name of the grantee
        grant_option : str, optional
            If true, allows the recipient role to grant the privileges to other roles.
        granted_by : str, optional
            The role that granted this privilege to this grantee
        granted_by_role_type : str, optional
            Type of the role that granted this privilege to this grantee
        """

        self.created_on = created_on
        self.privilege = privilege
        self.granted_on = granted_on
        self.name = name
        self.granted_to = granted_to
        self.grantee_name = grantee_name
        self.grant_option = grant_option
        self.granted_by = granted_by
        self.granted_by_role_type = granted_by_role_type

    __properties = [
        "created_on", "privilege", "granted_on", "name", "granted_to",
        "grantee_name", "grant_option", "granted_by", "granted_by_role_type"
    ]

    def __repr__(self) -> str:
        return repr(self._to_model())

    def _to_model(self):
        return GrantOn(
            created_on=self.created_on,
            privilege=self.privilege,
            granted_on=self.granted_on,
            name=self.name,
            granted_to=self.granted_to,
            grantee_name=self.grantee_name,
            grant_option=self.grant_option,
            granted_by=self.granted_by,
            granted_by_role_type=self.granted_by_role_type,
        )

    @classmethod
    def _from_model(cls, model) -> GrantOnModel:
        return GrantOnModel(
            created_on=model.created_on,
            privilege=model.privilege,
            granted_on=model.granted_on,
            name=model.name,
            granted_to=model.granted_to,
            grantee_name=model.grantee_name,
            grant_option=model.grant_option,
            granted_by=model.granted_by,
            granted_by_role_type=model.granted_by_role_type,
        )

    def to_dict(self):
        """Creates a dictionary of the properties from a GrantOn.

        This method constructs a dictionary with the key-value entries corresponding to the properties of the GrantOn object.

        Returns
        _______
        dict
            A dictionary object created using the input model.
        """
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> GrantOnModel:
        """Creates an instance of GrantOn from a dict.

        This method constructs a GrantOn object from a dictionary with the key-value pairs of its properties.

        Parameters
        ----------
        obj : dict
            A dictionary whose keys and values correspond to the properties of the resource object.

        Returns
        _______
        GrantOn
            A GrantOn object created using the input dictionary; this will fail if the required properties are missing.
        """
        return cls._from_model(GrantOn.from_dict(obj))


GrantOn._model_class = GrantOnModel
