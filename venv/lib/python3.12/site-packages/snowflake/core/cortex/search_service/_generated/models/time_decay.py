# coding: utf-8
"""
    Cortex Search REST API.

    OpenAPI 3.0 specification for the Cortex Search REST API  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Contact: support@snowflake.com
    Generated by: https://openapi-generator.tech

    Do not edit this file manually.
"""

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from typing import Union

from datetime import datetime

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr

from typing import Any, ClassVar, Dict, List, Optional, Union


class TimeDecay(BaseModel):
    """A model object representing the TimeDecay resource.

    Constructs an object of type TimeDecay with the provided properties.

    Parameters
    __________
    column : str
        Column to apply this function to.
    weight : float, optional
        Weight to apply for decaying this timestamp column. Normalized across all scored columns in the scoring config so that all weights sum to 1. If a weight is not provided, the weight defaults to 1 pre-normalization.
    limit_hours : float, optional
        Optional limit in hours after which the decay does not apply.
    now : datetime, optional
        Optional reference timestamp to calculate decay from.
    """

    column: StrictStr

    weight: Optional[Union[StrictFloat, StrictInt]] = None

    limit_hours: Optional[Union[StrictFloat, StrictInt]] = None

    now: Optional[datetime] = None

    __properties = ["column", "weight", "limit_hours", "now"]

    class Config:
        populate_by_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias."""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias."""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TimeDecay:
        """Create an instance of TimeDecay from a JSON string."""
        return cls.from_dict(json.loads(json_str))

    def to_dict(
        self,
        hide_readonly_properties: bool = False,
    ) -> dict[str, Any]:
        """Returns the dictionary representation of the model using alias."""

        exclude_properties = set()

        if hide_readonly_properties:
            exclude_properties.update({})

        _dict = dict(
            self._iter(to_dict=True,
                       by_alias=True,
                       exclude=exclude_properties,
                       exclude_none=True))

        return _dict

    def to_dict_without_readonly_properties(self) -> dict[str, Any]:
        """Return the dictionary representation of the model without readonly properties."""
        return self.to_dict(hide_readonly_properties=True)

    @classmethod
    def from_dict(cls, obj: dict) -> TimeDecay:
        """Create an instance of TimeDecay from a dict."""

        if obj is None:
            return None

        if type(obj) is not dict:
            return TimeDecay.parse_obj(obj)

        _obj = TimeDecay.parse_obj({
            "column": obj.get("column"),
            "weight": obj.get("weight"),
            "limit_hours": obj.get("limit_hours"),
            "now": obj.get("now"),
        })

        return _obj


from typing import Optional, List, Dict


class TimeDecayModel():

    def __init__(
        self,
        column: str,
        # optional properties
        weight: Optional[float] = None,
        limit_hours: Optional[float] = None,
        now: Optional[datetime] = None,
    ):
        """A model object representing the TimeDecay resource.

        Constructs an object of type TimeDecay with the provided properties.

        Parameters
        __________
        column : str
            Column to apply this function to.
        weight : float, optional
            Weight to apply for decaying this timestamp column. Normalized across all scored columns in the scoring config so that all weights sum to 1. If a weight is not provided, the weight defaults to 1 pre-normalization.
        limit_hours : float, optional
            Optional limit in hours after which the decay does not apply.
        now : datetime, optional
            Optional reference timestamp to calculate decay from.
        """

        self.column = column
        self.weight = weight
        self.limit_hours = limit_hours
        self.now = now

    __properties = ["column", "weight", "limit_hours", "now"]

    def __repr__(self) -> str:
        return repr(self._to_model())

    def _to_model(self):
        return TimeDecay(
            column=self.column,
            weight=self.weight,
            limit_hours=self.limit_hours,
            now=self.now,
        )

    @classmethod
    def _from_model(cls, model) -> TimeDecayModel:
        return TimeDecayModel(
            column=model.column,
            weight=model.weight,
            limit_hours=model.limit_hours,
            now=model.now,
        )

    def to_dict(self):
        """Creates a dictionary of the properties from a TimeDecay.

        This method constructs a dictionary with the key-value entries corresponding to the properties of the TimeDecay object.

        Returns
        _______
        dict
            A dictionary object created using the input model.
        """
        return self._to_model().to_dict()

    @classmethod
    def from_dict(cls, obj: dict) -> TimeDecayModel:
        """Creates an instance of TimeDecay from a dict.

        This method constructs a TimeDecay object from a dictionary with the key-value pairs of its properties.

        Parameters
        ----------
        obj : dict
            A dictionary whose keys and values correspond to the properties of the resource object.

        Returns
        _______
        TimeDecay
            A TimeDecay object created using the input dictionary; this will fail if the required properties are missing.
        """
        return cls._from_model(TimeDecay.from_dict(obj))


TimeDecay._model_class = TimeDecayModel
